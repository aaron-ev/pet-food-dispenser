/*
*       Author: Aarón Escoboza Villegas
*       Github: aaron-ev
*
**/

#include "lcd1602_i2c.h"

void lcd_writeCMD(uint8_t cmd)
{
    uint8_t data[4];
    uint8_t data_upper,data_lower;  //upper nibble and lower nibble

    data_lower = (cmd << 4 ) & MASK_UPPER_NIBBLE;
    data_upper = cmd & MASK_UPPER_NIBBLE;

    data[0] = data_upper | 0x0C; //add E = 1 and RS = 0
    data[1] = data_upper | 0x08; //add E = 0 and RS = 0
    data[2] = data_lower | 0x0C;
    data[3] = data_lower | 0x08;

    HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,data,4,LCD_DELAY_100ms);
}

void lcd_init(void)
{
// 4 bit initialisation

	HAL_Delay(50);  // wait for >40ms
	lcd_writeCMD (0x30);
	HAL_Delay(5);  // wait for >4.1ms
	lcd_writeCMD (0x30);
	HAL_Delay(1);  // wait for >100us
	lcd_writeCMD (0x30);
	HAL_Delay(10);

	lcd_writeCMD (0x20);  // 4bit mode
	HAL_Delay(10);

  // dislay initialisation
	lcd_writeCMD (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
	HAL_Delay(1);
	lcd_writeCMD (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
	lcd_writeCMD(1);
	lcd_send_cmd (0x01);  // clear display
	lcd_writeCMD(1);
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	lcd_writeCMD(1);
	//lcd_send_cmd (0x0E);
	lcd_writeCMD (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}

