/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  *
 */


#include "main.h"
#include "lcd_i2c.h"
#include "servo.h"

#define TRUE 1
#define FALSE !TRUE
#define SOURCE_BUTTON_ENTER   0
#define SOURCE_BUTTON_DOWN    1
#define SOURCE_BUTTON_UP	  2
#define SOURCE_NOTHING		  4

#define ROW_CYCLES 2
#define ROW_SPEED  1
#define ROW_BACK   0

int arrow[3][2] = {{0,10},{1,0},{0,0,}}; //cyles,speed,back
int row = 2;
int itSource = SOURCE_NOTHING;
int times_to_serve = 1;

void display_screen_main()
{
	lcd_clear();
	lcd_send_line("Hour",1,3);
	lcd_send_line("->settings",1,0);
}
void display_screen_settings(void)
{
	lcd_clear();
	lcd_send_line("cycles",0,2);
	lcd_send_line("speed",1,2);
	lcd_send_line("back",0,12);

}
void func_screen_cycles(void)
{
	char cycles[2];
	lcd_clear();
	lcd_send_line("cycles < >",0,0);
	itoa(times_to_serve,cycles,10);
	lcd_send_line(cycles,0,8);
	flag_GPIO_it = FALSE;
	screen_cycles = TRUE;
	while(screen_cycles)
	{
		while(!flag_GPIO_it);
		switch(itSource)
		{
			case SOURCE_BUTTON_UP: times_to_serve++;
								   itoa(times_to_serve,cycles,10);
								   lcd_send_line(cycles,0,8);break;

			case SOURCE_BUTTON_DOWN: times_to_serve--;
									 itoa(times_to_serve,cycles,10);
									 lcd_send_line(cycles,0,8);break;

			case SOURCE_BUTTON_ENTER: func_screen_main();//row  = ROW_CYCLES; screen_cycles = FALSE;break;
			default: break;
		}
		flag_GPIO_it = FALSE;
	}

}
void func_screen_settings(void)
{
	display_screen_settings();
	lcd_send_line("->",0,0);
	flag_GPIO_it = FALSE;
	screen_main = FALSE;
	screen_settings = TRUE;
	while(screen_settings)
    {

		while(!flag_GPIO_it);
		switch(itSource)
		{
			case SOURCE_BUTTON_ENTER : switch(row)
										{
											case ROW_CYCLES: func_screen_cycles();break;
											//case ROW_SPEED: button_enter = FALSE;screen_main = TRUE;func_screen_main();break;//screen_cycles();break;
											case ROW_BACK: row = ROW_CYCLES;screen_settings = FALSE; break;//screen_cycles();break;
											default : break;
										}break;

			case SOURCE_BUTTON_DOWN:	if(row > 0)
										{
											row--;
											switch(row)
											{
											case 0: display_screen_settings();lcd_send_line("->",arrow[row][0],arrow[row][1]);break;
											case 1: display_screen_settings();lcd_send_line("->",arrow[row][0],arrow[row][1]);break;
											case 2: display_screen_settings();lcd_send_line("->",arrow[row][0],arrow[row][1]);break;
											default :break;
											}

										}break;
			case SOURCE_BUTTON_UP:	if(row < 3)
										{
											row++;
											switch(row)
											{
											case 0: display_screen_settings();lcd_send_line("->",arrow[row][0],arrow[row][1]);break;
											case 1: display_screen_settings();lcd_send_line("->",arrow[row][0],arrow[row][1]);break;
											case 2: display_screen_settings();lcd_send_line("->",arrow[row][0],arrow[row][1]);break;
											default :break;
											}

										}break;
			default:  break;

		}
		flag_GPIO_it = 0;
	}
}

void func_screen_main(void)
{
	display_screen_main();
	screen_main = TRUE;
	button_enter = FALSE;
	int i;
	while (screen_main)
	{
				if(button_dispense)
				{
					//Message
					lcd_send_line_clr("serving...",1,0);
					for(i = 0; i < times_to_serve; i = i + 1)
					{
						servo_Write(SERVO_DEGREE_180);
						servo_Write(SERVO_DEGREE_0);
						button_dispense = 0;
					}
					display_screen_main();
				}
				else if(button_enter)
				{
					button_enter = 0;
					func_screen_settings();
				}

	}
}

int main(void)
{
	int i;
	HAL_Init();
	//HAL_Delay(250);
	SystemClock_Config();
	GPIO_Init();
	MX_I2C1_Init();
	lcd_init ();
	lcd_send_line_clr("Hello World",1,0);
	HAL_Delay(1000);
	servo_Init(GPIOA,GPIO_SERVO_A0);
	while (1)
	{
		func_screen_main();

	}
	}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

static void MX_I2C1_Init(void)
{
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
}

 void GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  //GPIO Ports Clock Enable
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  //configure GPIO pin Output Level
  //HAL_GPIO_WritePin(GPIOA, BUTTON_DISPENSE_PIN, GPIO_PIN_RESET);

  //Configure GPIO pins
  GPIO_InitStruct.Pin = BUTTON_DISPENSE_PIN | BUTTON_ENTER_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = BUTTON_UP_PIN | BUTTON_DOWN_PIN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  // Interrupt settings
  HAL_NVIC_SetPriority(EXTI1_IRQn,0,15);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  HAL_NVIC_SetPriority(EXTI2_IRQn,0,15);
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);

  HAL_NVIC_SetPriority(EXTI3_IRQn,0,15);
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn,0,15);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

 /*
 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 {
	 //if(HAL_GPIO_ReadPin(GPIOA,BUTTON_DISPENSE_PIN))
			 //button_dispense = TRUE;
	// else if(HAL_GPIO_ReadPin(GPIOA,BUTTON_DOWN_PIN))
		// BUTTON_DOWN_PIN++;
	 if(button_down < 3)
	 {
		 flag_GPIO_it = TRUE;
		 button_down++;
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON_DOWN_PIN);
	 }
 }
*/
void Error_Handler(void)
{
  __disable_irq();
  while (1)
  {
  }
}
